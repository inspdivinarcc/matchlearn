<!DOCTYPE html>
<!--
  Match&Learn Pro ‚Äì Ultimate Edition 2025 (simplified)
  This single‚Äëfile React application demonstrates a condensed version of the
  fully featured Match&Learn platform. It includes a global context for user
  state, toast notifications, and six functional tabs: Home, Match, Learn,
  Battle, Store, and Profile. Each tab showcases core gamified features such
  as daily quests, AI matching, course tracking, competitive battles, a
  marketplace with VIP plans, and a profile with achievements and skills.

  To run this app, simply open this HTML file in your browser. Make sure
  you have an internet connection so React, Babel and Tailwind can load.
-->
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Match&Learn Pro ‚Äì Ultimate Edition 2025</title>
  <!-- Load React and Babel -->
  <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js" crossorigin></script>
  <!-- TailwindCSS from CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    @keyframes float {
      0%,100% { transform: translateY(0) rotate(0deg) scale(1); opacity: 0.4; }
      25% { transform: translateY(-25px) rotate(90deg) scale(1.1); opacity: 0.7; }
      50% { transform: translateY(-15px) rotate(180deg) scale(0.9); opacity: 0.9; }
      75% { transform: translateY(-20px) rotate(270deg) scale(1.05); opacity: 0.6; }
    }
    .animate-float { animation: float 20s linear infinite; }
    html.dark { background: #0f172a; color: #f1f5f9; }
    .glass {
      background: rgba(255,255,255,0.1);
      backdrop-filter: blur(15px);
      border: 1px solid rgba(255,255,255,0.2);
    }
    .dark .glass {
      background: rgba(0,0,0,0.3);
      border-color: rgba(255,255,255,0.1);
    }
    ::-webkit-scrollbar { width: 8px; }
    ::-webkit-scrollbar-thumb { background: rgba(88,101,242,0.5); border-radius: 9999px; }

    /* Additional animation for slow spinning rocket used in the login wizard */
    @keyframes spin-slow {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    .animate-spin-slow {
      animation: spin-slow 3s linear infinite;
    }
  </style>
</head>
<body class="bg-gray-50 dark:bg-[#0f172a] transition-colors min-h-screen">
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect, useContext, createContext } = React;

    /**
     * Simple translation dictionary for navigation and settings.  This
     * allows the interface to switch between Portuguese and English.
     */
    const translations = {
      pt: {
        home: 'üè† Neural Hub',
        match: 'ü§ñ Quantum Match',
        learn: 'üß† Consciousness Learn',
        battle: '‚öîÔ∏è AI Arena',
        store: 'üõçÔ∏è Quantum Store',
        profile: 'üë§ Digital Soul',
        settings: '‚öôÔ∏è Configura√ß√µes',
        // Added social tab translation
        social: 'üó£Ô∏è Social',
        settingsTitle: 'Configura√ß√µes',
        darkModeLabel: 'Modo',
        darkModeOn: 'Escuro',
        darkModeOff: 'Claro',
        toggle: (v) => (v ? 'Desativar' : 'Ativar'),
        soundLabel: 'Sons',
        languageLabel: 'Idioma',
        portuguese: 'Portugu√™s',
        english: 'English'
      },
      en: {
        home: 'üè† Home',
        match: 'ü§ñ Match',
        learn: 'üß† Learn',
        battle: '‚öîÔ∏è Battle',
        store: 'üõçÔ∏è Store',
        profile: 'üë§ Profile',
        settings: '‚öôÔ∏è Settings',
        // Added social tab translation
        social: 'üó£Ô∏è Social',
        settingsTitle: 'Settings',
        darkModeLabel: 'Mode',
        darkModeOn: 'Dark',
        darkModeOff: 'Light',
        toggle: (v) => (v ? 'Disable' : 'Enable'),
        soundLabel: 'Sound',
        languageLabel: 'Language',
        portuguese: 'Portuguese',
        english: 'English'
      }
    };

    /**
     * Global context holds the user object, update function and toast queue.
     */
    const AppContext = createContext(null);
    const useApp = () => useContext(AppContext);

    /**
     * Simple Toast component to display notifications.
     */
    const Toast = ({ toast, onRemove }) => {
      useEffect(() => {
        const t = setTimeout(() => onRemove(toast.id), 4000);
        return () => clearTimeout(t);
      }, []);
      return (
        <div className="glass border border-purple-300 dark:border-purple-700 rounded-xl p-4 mb-2 w-72 shadow-xl">
          <h4 className="font-bold mb-1 text-purple-700 dark:text-purple-200">{toast.title}</h4>
          <p className="text-sm text-gray-700 dark:text-gray-300">{toast.message}</p>
        </div>
      );
    };

    /**
     * A card component with glassmorphism style.
     */
    const GlowCard = ({ children, className = "" }) => (
      <div className={`glass rounded-2xl shadow-lg p-6 ${className}`}>{children}</div>
    );

    /**
     * Format large numbers into K/M abbreviations.
     */
    const formatNumber = (num) => {
      if (num >= 1_000_000) return (num / 1_000_000).toFixed(1) + 'M';
      if (num >= 1_000) return (num / 1_000).toFixed(1) + 'K';
      return String(num);
    };

    /**
     * Compute level and progress from experience points.
     */
    const calculateLevel = (xp) => {
      const base = 1000;
      const mult = 1.2;
      let level = 1;
      let need = base;
      let acc = 0;
      while (acc + need <= xp) {
        acc += need;
        level++;
        need = Math.floor(base * Math.pow(mult, level - 1));
      }
      return { level, progress: xp - acc, next: need };
    };

    /**
     * Home tab showing basic stats and daily quests.
     */
    const HomeTab = () => {
      const { user, updateUser } = useApp();
      const levelInfo = calculateLevel(user.xp);
      const dailyQuests = [
        { id: 'q1', title: 'Assistir 2 aulas', progress: 1, target: 2, rewards: { xp: 50, coins: 20 } },
        { id: 'q2', title: 'Curtir 3 posts', progress: 0, target: 3, rewards: { xp: 30, coins: 10 } },
        { id: 'q3', title: 'Fazer 1 batalha', progress: 0, target: 1, rewards: { xp: 80, coins: 40 } },
      ];
      const claimQuest = (quest) => {
        if (quest.progress < quest.target) return;
        updateUser({
          xp: user.xp + quest.rewards.xp,
          coins: user.coins + quest.rewards.coins
        });
      };
      return (
        <div className="space-y-6">
          <GlowCard>
            <h2 className="text-2xl font-bold mb-2">Ol√°, {user.username}</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
              <div>
                <div className="text-xl font-bold text-purple-600 dark:text-purple-300">{levelInfo.level}</div>
                <div className="text-sm text-gray-600 dark:text-gray-400">N√≠vel</div>
              </div>
              <div>
                <div className="text-xl font-bold text-blue-600 dark:text-blue-300">{formatNumber(user.coins)}</div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Coins</div>
              </div>
              <div>
                <div className="text-xl font-bold text-pink-600 dark:text-pink-300">{formatNumber(user.gems)}</div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Gems</div>
              </div>
              <div>
                <div className="text-xl font-bold text-orange-600 dark:text-orange-300">{user.streak}</div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Streak</div>
              </div>
            </div>
            <div className="mt-4 text-sm">Experi√™ncia para pr√≥ximo n√≠vel: {levelInfo.progress} / {levelInfo.next}</div>
            <div className="w-full bg-gray-200 dark:bg-gray-700 h-2 mt-2 rounded-full overflow-hidden">
              <div className="h-full bg-gradient-to-r from-purple-500 to-pink-500" style={{ width: `${(levelInfo.progress/levelInfo.next)*100}%` }}></div>
            </div>
          </GlowCard>
          <GlowCard>
            <h3 className="text-xl font-bold mb-4">Quests Di√°rias</h3>
            <div className="space-y-4">
              {dailyQuests.map((quest) => (
                <div key={quest.id} className="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700">
                  <div>
                    <h4 className="font-semibold">{quest.title}</h4>
                    <p className="text-xs text-gray-500 dark:text-gray-400">{quest.progress}/{quest.target}</p>
                  </div>
                  {quest.progress >= quest.target ? (
                    <button onClick={() => claimQuest(quest)} className="px-3 py-1 text-sm bg-green-500 text-white rounded-full">Receber</button>
                  ) : (
                    <button className="px-3 py-1 text-sm bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-full cursor-not-allowed">Em progresso</button>
                  )}
                </div>
              ))}
            </div>
          </GlowCard>
        </div>
      );
    };

    /**
     * Match tab with sample people and chat simulation.
     */
    const MatchTab = () => {
      const { user, updateUser, addToast } = useApp();
      const [chatPeer, setChatPeer] = useState(null);
      const people = [
        { id: 'p1', name: 'Ana Costa', avatar: 'üë©‚Äçüíª', level: 18, interests: ['IA','Python'] },
        { id: 'p2', name: 'Carlos Dev', avatar: 'üë®‚Äçüíª', level: 22, interests: ['React','Node'] },
        { id: 'p3', name: 'Mariana Study', avatar: 'üìö', level: 15, interests: ['Metaverso','Blockchain'] }
      ];
      const connect = (person) => {
        updateUser({ friends: [...user.friends, person] });
        addToast({ title: 'Match criado!', message: `Voc√™ se conectou com ${person.name}` });
        setChatPeer(person);
      };
      return (
        <div>
          {!chatPeer ? (
            <div className="grid md:grid-cols-2 gap-6">
              {people.map((p) => (
                <GlowCard key={p.id} className="p-4 flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 text-white flex items-center justify-center rounded-full text-2xl">
                      {p.avatar}
                    </div>
                    <div>
                      <h4 className="font-bold">{p.name}</h4>
                      <p className="text-xs text-gray-500 dark:text-gray-400">N√≠vel {p.level}</p>
                    </div>
                  </div>
                  <button onClick={() => connect(p)} className="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600">Conectar</button>
                </GlowCard>
              ))}
            </div>
          ) : (
            <ChatWindow peer={chatPeer} onClose={() => setChatPeer(null)} />
          )}
        </div>
      );
    };

    /**
     * Chat window component with simple auto‚Äëreply.
     */
    const ChatWindow = ({ peer, onClose }) => {
      const [messages, setMessages] = useState([
        { fromMe: false, text: `Ol√°! Eu sou ${peer.name}. Vamos estudar juntos?` }
      ]);
      const [input, setInput] = useState('');
      const sendMessage = () => {
        if (!input.trim()) return;
        setMessages((msgs) => [...msgs, { fromMe: true, text: input }]);
        setInput('');
        setTimeout(() => {
          const replies = ['Sim, claro!','Qual assunto voc√™ gosta?','Vamos marcar um estudo?'];
          const reply = replies[Math.floor(Math.random() * replies.length)];
          setMessages((msgs) => [...msgs, { fromMe: false, text: reply }]);
        }, 1200);
      };
      return (
        <GlowCard className="p-4">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-full flex items-center justify-center text-xl">{peer.avatar}</div>
              <div>
                <div className="font-bold">{peer.name}</div>
                <div className="text-xs text-green-500">Online</div>
              </div>
            </div>
            <button onClick={onClose} className="text-gray-500 hover:text-red-500">‚úï</button>
          </div>
          <div className="h-60 overflow-y-auto mb-3 space-y-2 p-2 bg-gray-100 dark:bg-gray-800 rounded-lg">
            {messages.map((msg, idx) => (
              <div key={idx} className={`max-w-[70%] p-2 rounded-lg text-sm ${msg.fromMe ? 'ml-auto bg-purple-500 text-white' : 'bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200'}`}>{msg.text}</div>
            ))}
          </div>
          <div className="flex gap-2">
            <input value={input} onChange={(e) => setInput(e.target.value)} onKeyDown={(e) => e.key === 'Enter' && sendMessage()} className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none dark:bg-gray-700 dark:text-white" placeholder="Digite sua mensagem..." />
            <button onClick={sendMessage} className="px-3 py-2 bg-purple-500 text-white rounded-lg">Enviar</button>
          </div>
        </GlowCard>
      );
    };

    /**
     * Three‚Äëstep login wizard allowing the user to select a role,
     * choose interests and enter their name. Once complete it calls
     * onFinish with the collected data. A spinning rocket icon
     * reinforces the futuristic feel of the platform.
     */
    const LoginWizard = ({ onFinish }) => {
      const [step, setStep] = useState(1);
      const [role, setRole] = useState('student');
      const [name, setName] = useState('');
      const [email, setEmail] = useState('');
      const [password, setPassword] = useState('');
      const [interests, setInterests] = useState([]);
      const INTERESTS = ['IA','Programa√ß√£o','Design','Empreendedorismo','Matem√°tica','Ci√™ncia'];
      return (
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-50 p-4">
          <GlowCard className="w-full max-w-xl">
            <div className="text-center mb-6">
              <div className="w-16 h-16 mx-auto rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white flex items-center justify-center text-3xl animate-spin-slow">üöÄ</div>
              <h1 className="text-3xl font-bold mt-4 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">Match&Learn Pro</h1>
              <p className="text-gray-600 mt-2">Passo {step} de 3</p>
            </div>
            {step === 1 && (
              <div className="space-y-6">
                <h3 className="font-semibold text-center">Qual o seu papel?</h3>
                <div className="grid grid-cols-2 gap-4">
                  <button onClick={() => setRole('student')} className={`p-4 rounded-xl border-2 transition-all transform hover:scale-105 ${role === 'student' ? 'border-purple-500 bg-purple-50' : 'border-gray-200 hover:bg-gray-50'}`}>
                    <div className="text-center">
                      <div className="text-2xl mb-2">üë®‚Äçüéì</div>
                      <span className="font-medium">Estudante</span>
                    </div>
                  </button>
                  <button onClick={() => setRole('mentor')} className={`p-4 rounded-xl border-2 transition-all transform hover:scale-105 ${role === 'mentor' ? 'border-purple-500 bg-purple-50' : 'border-gray-200 hover:bg-gray-50'}`}>
                    <div className="text-center">
                      <div className="text-2xl mb-2">üë©‚Äçüè´</div>
                      <span className="font-medium">Mentor</span>
                    </div>
                  </button>
                </div>
                <button onClick={() => setStep(2)} className="w-full py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700">Avan√ßar</button>
              </div>
            )}
            {step === 2 && (
              <div className="space-y-5">
                <div className="space-y-3">
                  <input
                    placeholder="Seu nome"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    className="flex w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-500"
                  />
                  <input
                    placeholder="Email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="flex w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-500"
                    type="email"
                  />
                  <input
                    placeholder="Senha"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="flex w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-500"
                    type="password"
                  />
                </div>
                <div className="flex justify-between">
                  <button onClick={() => setStep(1)} className="px-4 py-2 border rounded-md">Voltar</button>
                  <button onClick={() => setStep(3)} disabled={!(name.trim() && email.trim() && password.trim())} className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:opacity-50">Avan√ßar</button>
                </div>
              </div>
            )}
            {step === 3 && (
              <div className="space-y-6">
                <h3 className="text-xl font-semibold text-center">Escolha seus interesses</h3>
                <div className="flex flex-wrap gap-2 justify-center">
                  {INTERESTS.map((int) => (
                    <button
                      key={int}
                      onClick={() =>
                        setInterests((prev) =>
                          prev.includes(int) ? prev.filter((i) => i !== int) : [...prev, int]
                        )
                      }
                      className={`px-4 py-2 rounded-full text-sm border transition-all ${interests.includes(int) ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white border-purple-600' : 'border-gray-300 hover:bg-gray-50'}`}
                    >
                      {int}
                    </button>
                  ))}
                </div>
                <div className="text-center space-y-4">
                  <button onClick={() => onFinish({ role, username: name, interests, email })} className="w-full py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-md hover:from-purple-700 hover:to-pink-700">Concluir</button>
                </div>
              </div>
            )}
          </GlowCard>
        </div>
      );
    };

    /**
     * Simple social feed where users can like posts. This acts as a
     * foundation for a future fully fledged social module. Posts are
     * stored locally for demo purposes.
     */
    const SocialTab = () => {
      const { user, addToast, updateUser } = useApp();
      // Posts with extended properties: comments, shares and liked state
      const [posts, setPosts] = useState([
        { id: 'p1', user: { name: 'Ana', avatar: 'üë©‚Äçüíª' }, content: 'Explorando IA generativa hoje! üöÄ', likes: 3, comments: 1, shares: 0, liked: false },
        { id: 'p2', user: { name: 'Carlos', avatar: 'üë®‚Äçüíª' }, content: 'Algu√©m recomenda um curso de blockchain?', likes: 1, comments: 0, shares: 0, liked: false },
        { id: 'p3', user: { name: 'Lia', avatar: 'üßö' }, content: 'Meu primeiro NFT comprado na plataforma!', likes: 5, comments: 2, shares: 1, liked: false }
      ]);
      // Chat peer when user opens chat from a post
      const [chatPeer, setChatPeer] = useState(null);
      const likePost = (id) => {
        setPosts((prev) => prev.map((p) => (p.id === id ? { ...p, liked: !p.liked, likes: p.liked ? p.likes - 1 : p.likes + 1 } : p)));
        updateUser({ socialScore: user.socialScore + 2 });
      };
      const commentPost = (id) => {
        setPosts((prev) => prev.map((p) => (p.id === id ? { ...p, comments: p.comments + 1 } : p)));
        addToast({ title: 'Comentado', message: 'Seu coment√°rio foi adicionado!', type: 'success' });
        updateUser({ socialScore: user.socialScore + 3 });
      };
      const sharePost = (id) => {
        setPosts((prev) => prev.map((p) => (p.id === id ? { ...p, shares: p.shares + 1 } : p)));
        addToast({ title: 'Compartilhado', message: 'Post compartilhado com sucesso!', type: 'success' });
        updateUser({ socialScore: user.socialScore + 5 });
      };
      const openChat = (postUser) => {
        setChatPeer(postUser);
      };
      return (
        <div className="space-y-6">
          {posts.map((post) => (
            <GlowCard key={post.id} className="p-4">
              <div className="flex items-center gap-3 mb-2">
                <div className="w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white text-sm">{post.user.avatar}</div>
                <div className="font-semibold">{post.user.name}</div>
              </div>
              <p className="mb-3 text-sm text-gray-700 dark:text-gray-300">{post.content}</p>
              <div className="flex items-center gap-6 text-sm border-t border-black/10 dark:border-white/10 pt-2">
                <button onClick={() => likePost(post.id)} className={`flex items-center gap-1 ${post.liked ? 'text-red-500' : 'text-gray-600 dark:text-gray-300 hover:text-red-500'}`}>‚ù§Ô∏è <span>{post.likes}</span></button>
                <button onClick={() => commentPost(post.id)} className="flex items-center gap-1 text-gray-600 dark:text-gray-300 hover:text-blue-500">üí¨ <span>{post.comments}</span></button>
                <button onClick={() => sharePost(post.id)} className="flex items-center gap-1 text-gray-600 dark:text-gray-300 hover:text-green-500">üîÑ <span>{post.shares}</span></button>
                <button onClick={() => openChat(post.user)} className="flex items-center gap-1 text-gray-600 dark:text-gray-300 hover:text-purple-500">üì© Chat</button>
              </div>
            </GlowCard>
          ))}
          {chatPeer && <ChatWindow peer={chatPeer} onClose={() => setChatPeer(null)} />}
        </div>
      );
    };

    /**
     * Learn tab listing courses with progress and categories.
     */
    const LearnTab = () => {
      const courses = [
        { id:'c1', title: 'Machine Learning', instructor: 'Dr. Silva', duration:'10h', students: 1200, price:0, progress:30, difficulty:'Intermedi√°rio' },
        { id:'c2', title: 'Blockchain B√°sico', instructor: 'Prof. Souza', duration:'8h', students: 800, price:199, progress:0, difficulty:'Iniciante' },
        { id:'c3', title: 'React Avan√ßado', instructor: 'Eng. Lima', duration:'12h', students: 1500, price:249, progress:60, difficulty:'Avan√ßado' },
      ];
      return (
        <div className="space-y-6">
          <GlowCard>
            <h2 className="text-2xl font-bold mb-4">Cursos Dispon√≠veis</h2>
            <div className="grid md:grid-cols-2 gap-6">
              {courses.map((course) => (
                <GlowCard key={course.id} className="p-4">
                  <h3 className="font-bold text-lg mb-1">{course.title}</h3>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Instrutor: {course.instructor}</p>
                  <div className="flex justify-between text-sm my-2">
                    <span>‚è±Ô∏è {course.duration}</span>
                    <span>üë• {formatNumber(course.students)}</span>
                    <span className="font-semibold">{course.price === 0 ? 'Gr√°tis' : `R$ ${course.price}`}</span>
                  </div>
                  {course.progress > 0 && (
                    <div className="mb-2">
                      <div className="flex justify-between text-xs">
                        <span>Progresso</span>
                        <span>{course.progress}%</span>
                      </div>
                      <div className="w-full bg-gray-200 dark:bg-gray-700 h-2 rounded-full overflow-hidden">
                        <div className="h-full bg-gradient-to-r from-green-500 to-emerald-500" style={{ width: `${course.progress}%` }}></div>
                      </div>
                    </div>
                  )}
                  <button className="w-full py-2 mt-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600">{course.progress > 0 ? 'Continuar' : 'Iniciar'}</button>
                </GlowCard>
              ))}
            </div>
          </GlowCard>
        </div>
      );
    };

    /**
     * Battle tab with sample battle listing and join button.
     */
    const BattleTab = () => {
      const { user, updateUser, addToast } = useApp();
      const battles = [
        { id:'b1', title: 'Quiz Matem√°tico', players:'5/8', prize:'300 XP', entry:20, status:'Aberto' },
        { id:'b2', title: 'Desafio de C√≥digo', players:'8/8', prize:'500 XP', entry:50, status:'Cheio' },
        { id:'b3', title: 'Battle de Cultura', players:'2/8', prize:'200 XP', entry:10, status:'Aberto' }
      ];
      const joinBattle = (battle) => {
        if (battle.status !== 'Aberto') return;
        if (user.coins < battle.entry) {
          addToast({ title: 'Coins insuficientes', message: 'Voc√™ n√£o tem coins suficientes.' });
          return;
        }
        updateUser({ coins: user.coins - battle.entry });
        addToast({ title:'Battle iniciada', message:`Voc√™ entrou em ${battle.title}` });
      };
      return (
        <div className="space-y-6">
          <GlowCard>
            <h2 className="text-2xl font-bold mb-4">Battles Dispon√≠veis</h2>
            <div className="space-y-4">
              {battles.map((b) => (
                <div key={b.id} className="flex items-center justify-between p-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl">
                  <div>
                    <h4 className="font-semibold">{b.title}</h4>
                    <p className="text-xs text-gray-500 dark:text-gray-400">Jogadores: {b.players}</p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">Pr√™mio: {b.prize}</p>
                  </div>
                  <button onClick={() => joinBattle(b)} disabled={b.status !== 'Aberto'} className={`px-4 py-2 rounded-lg text-sm font-semibold ${b.status !== 'Aberto' ? 'bg-gray-300 dark:bg-gray-600 text-gray-500 cursor-not-allowed' : 'bg-red-500 text-white hover:bg-red-600'}`}>
                    {b.status === 'Aberto' ? `Entrar (${b.entry}c)` : 'Cheio'}
                  </button>
                </div>
              ))}
            </div>
          </GlowCard>
        </div>
      );
    };

    /**
     * Store tab with items and VIP plans.
     */
    const StoreTab = () => {
      const { user, updateUser, addToast } = useApp();
      const items = [
        { id:'i1', name:'Avatar C√≥smico', price:200, gems:false, rarity:'√âpico', image:'ü™ê' },
        { id:'i2', name:'Efeito Energia', price:150, gems:true, rarity:'Raro', image:'‚ú®' },
        { id:'i3', name:'Pet Rob√¥', price:500, gems:true, rarity:'Lend√°rio', image:'ü§ñ' },
      ];
      const plans = [
        { id:'vip1', name:'VIP Mensal', price:'R$ 29,90', benefits:['XP em dobro','200 gems'], popular:false },
        { id:'vip2', name:'VIP Anual', price:'R$ 199,90', benefits:['XP triplo','1000 gems'], popular:true }
      ];
      // Additional monetization options: coin packs and NFT marketplace
      const coinPacks = [
        { id:'pack1', coins:100, priceBRL:'R$ 4,99', bonus:0, popular:false },
        { id:'pack2', coins:500, priceBRL:'R$ 19,99', bonus:50, popular:true },
        { id:'pack3', coins:1200, priceBRL:'R$ 39,99', bonus:200, popular:false },
        { id:'pack4', coins:2500, priceBRL:'R$ 79,99', bonus:500, popular:false }
      ];
      const nftItems = [
        { id:'nft1', name:'Drag√£o ENEM Master', price:500, rarity:'mythic' },
        { id:'nft2', name:'Cristal da Sabedoria', price:250, rarity:'legendary' },
        { id:'nft3', name:'Espada do Coding', price:300, rarity:'epic' }
      ];
      const buyItem = (item) => {
        const currency = item.gems ? user.gems : user.coins;
        if (currency < item.price) {
          addToast({ title:'Saldo insuficiente', message:'Voc√™ n√£o tem saldo suficiente.' });
          return;
        }
        if (item.gems) {
          updateUser({ gems: user.gems - item.price });
        } else {
          updateUser({ coins: user.coins - item.price });
        }
        addToast({ title:'Compra realizada', message:`Voc√™ adquiriu ${item.name}` });
      };

      // Purchase a pack of coins, adding bonus if applicable
      const buyCoinPack = (pkg) => {
        const totalCoins = pkg.coins + (pkg.bonus || 0);
        updateUser({ coins: user.coins + totalCoins });
        addToast({ title:'Coins adquiridos', message:`${totalCoins} coins adicionados!` });
      };

      // Purchase an NFT item using coins; mark as owned in user's inventory
      const buyNFTItem = (nft) => {
        if (user.coins < nft.price) {
          addToast({ title:'Saldo insuficiente', message:'Voc√™ n√£o tem coins suficientes.' });
          return;
        }
        const owned = (user.nfts || []).some((n) => n.id === nft.id);
        if (owned) {
          addToast({ title:'NFT j√° adquirido', message:'Voc√™ j√° possui este NFT.' });
          return;
        }
        updateUser({
          coins: user.coins - nft.price,
          nfts: [...(user.nfts || []), { ...nft, owned: true }]
        });
        addToast({ title:'NFT adquirido!', message:`${nft.name} agora est√° em sua cole√ß√£o!` });
      };
      return (
        <div className="space-y-6">
          {/* Basic store items */}
          <GlowCard>
            <h2 className="text-2xl font-bold mb-4">Itens na Loja</h2>
            <div className="grid md:grid-cols-3 gap-4">
              {items.map((item) => (
                <GlowCard key={item.id} className="p-4 flex flex-col items-center">
                  <div className="text-5xl mb-2">{item.image}</div>
                  <h4 className="font-semibold mb-1">{item.name}</h4>
                  <span className="text-xs text-gray-500 dark:text-gray-400 mb-2">{item.rarity}</span>
                  <button onClick={() => buyItem(item)} className="mt-auto px-3 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 text-sm">{item.price} {item.gems ? 'üíé' : 'c'}</button>
                </GlowCard>
              ))}
            </div>
          </GlowCard>
          {/* VIP subscription plans */}
          <GlowCard>
            <h2 className="text-2xl font-bold mb-4">Planos VIP</h2>
            <div className="grid md:grid-cols-2 gap-4">
              {plans.map((plan) => (
                <GlowCard key={plan.id} className={`p-4 border ${plan.popular ? 'border-purple-500' : 'border-gray-200 dark:border-gray-700'}`}>
                  <h4 className="font-semibold text-lg">{plan.name}</h4>
                  <p className="mb-2">{plan.price}</p>
                  <ul className="mb-3 list-disc list-inside text-sm space-y-1">
                    {plan.benefits.map((b,i) => (<li key={i}>{b}</li>))}
                  </ul>
                  <button className="w-full py-2 bg-green-500 text-white rounded-lg hover:bg-green-600">Assinar</button>
                </GlowCard>
              ))}
            </div>
          </GlowCard>
          {/* Coin packs section */}
          <GlowCard className="p-6 bg-gradient-to-r from-blue-600 to-purple-600 text-white">
            <h3 className="text-2xl font-bold mb-2">üí∞ Pacotes de Coins</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {coinPacks.map((pkg) => (
                <div key={pkg.id} className={`relative bg-white/10 backdrop-blur-xl rounded-xl p-4 text-center border-2 ${pkg.popular ? 'border-yellow-400' : 'border-transparent'}`}>
                  {pkg.popular && (
                    <div className="absolute -top-3 left-1/2 -translate-x-1/2 bg-yellow-400 text-black px-3 py-1 rounded-full text-xs font-bold">POPULAR</div>
                  )}
                  <div className="text-2xl mb-2">üíµ</div>
                  <h4 className="font-bold text-lg">{pkg.coins + (pkg.bonus || 0)}</h4>
                  <p className="text-sm text-blue-100 mb-3">{pkg.priceBRL}</p>
                  <button onClick={() => buyCoinPack(pkg)} className="w-full bg-yellow-400 text-black font-bold py-2 rounded-lg hover:bg-yellow-500">Comprar</button>
                </div>
              ))}
            </div>
          </GlowCard>
          {/* NFT Marketplace */}
          <GlowCard className="p-6">
            <h3 className="text-2xl font-bold mb-4">üé≠ NFT Marketplace</h3>
            <div className="space-y-3">
              {nftItems.map((nft) => {
                const owned = (user.nfts || []).some((n) => n.id === nft.id && n.owned);
                return (
                  <div key={nft.id} className={`p-3 rounded-lg border-2 ${owned ? 'border-green-300 bg-green-50 dark:bg-green-900' : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800'}`}>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className={
                          `w-12 h-12 text-white rounded-lg grid place-items-center bg-gradient-to-r ${nft.rarity === 'mythic' ? 'from-purple-600 to-pink-600' : nft.rarity === 'legendary' ? 'from-yellow-500 to-orange-500' : 'from-blue-500 to-cyan-500'}`
                        }>
                          {nft.rarity === 'mythic' ? 'üëë' : nft.rarity === 'legendary' ? 'üíé' : '‚öîÔ∏è'}
                        </div>
                        <div>
                          <h5 className="font-semibold">{nft.name}</h5>
                          <span className={`inline-block px-2 py-1 text-xs font-semibold rounded-full capitalize ${nft.rarity === 'mythic' ? 'bg-purple-600 text-white' : nft.rarity === 'legendary' ? 'bg-yellow-500 text-white' : 'bg-blue-500 text-white'}`}>{nft.rarity}</span>
                        </div>
                      </div>
                      <div className="text-right space-y-1">
                        {owned ? (
                          <span className="inline-block px-2 py-1 text-xs font-semibold rounded-full bg-green-500 text-white">POSSUI</span>
                        ) : (
                          <>
                            <p className="font-bold text-purple-600 dark:text-purple-300">{nft.price} üí∞</p>
                            <button
                              onClick={() => buyNFTItem(nft)}
                              disabled={user.coins < nft.price}
                              className={`px-3 py-1 rounded-md text-sm mt-1 ${user.coins >= nft.price ? 'bg-purple-600 text-white hover:bg-purple-700' : 'bg-gray-300 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed'}`}
                            >
                              {user.coins >= nft.price ? 'Comprar' : 'Sem coins'}
                            </button>
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </GlowCard>
        </div>
      );
    };

    /**
     * Profile tab with stats, achievements and skills.
     */
    const ProfileTab = () => {
      const { user } = useApp();
      const achievements = [
        { id:'a1', name:'Primeira Quest', unlocked:true },
        { id:'a2', name:'Amigo Novo', unlocked:true },
        { id:'a3', name:'100 XP', unlocked:false }
      ];
      const skills = [
        { name:'Programa√ß√£o', level:80 },
        { name:'Matem√°tica', level:65 },
        { name:'Comunica√ß√£o', level:50 }
      ];
      const levelInfo = calculateLevel(user.xp);
      return (
        <div className="space-y-6">
          <GlowCard>
            <div className="text-center">
              <div className="w-20 h-20 bg-gradient-to-r from-purple-500 to-pink-500 text-white text-3xl flex items-center justify-center rounded-full mx-auto mb-3">
                {user.username.charAt(0).toUpperCase()}
              </div>
              <h2 className="font-bold text-xl">{user.username}</h2>
              <p className="text-sm text-gray-500 dark:text-gray-400">Membro desde {new Date().toLocaleDateString()}</p>
            </div>
          </GlowCard>
          <GlowCard>
            <h3 className="font-semibold mb-3">Conquistas</h3>
            <div className="space-y-2">
              {achievements.map((ach) => (
                <div key={ach.id} className={`p-2 rounded-lg flex justify-between ${ach.unlocked ? 'bg-green-100 dark:bg-green-900' : 'bg-gray-100 dark:bg-gray-800'}`}
                  >
                  <span>{ach.name}</span>
                  <span>{ach.unlocked ? '‚úì' : 'üîí'}</span>
                </div>
              ))}
            </div>
          </GlowCard>
          <GlowCard>
            <h3 className="font-semibold mb-3">Habilidades</h3>
            <div className="space-y-2">
              {skills.map((skill) => (
                <div key={skill.name}>
                  <div className="flex justify-between text-sm">
                    <span>{skill.name}</span>
                    <span>{skill.level}%</span>
                  </div>
                  <div className="w-full bg-gray-200 dark:bg-gray-700 h-2 rounded-full overflow-hidden">
                    <div className="h-full bg-gradient-to-r from-purple-500 to-pink-500" style={{ width: `${skill.level}%` }}></div>
                  </div>
                </div>
              ))}
            </div>
          </GlowCard>
        </div>
      );
    };

    /**
     * Settings tab to configure theme, sounds and language.  Values are
     * persisted via localStorage and reflected in the application context.
     */
    const SettingsTab = () => {
      const { soundEnabled, setSoundEnabled, darkMode, setDarkMode, language, setLanguage } = useApp();
      const t = translations[language];
      return (
        <div className="space-y-6">
          <GlowCard className="p-6">
            <h3 className="text-2xl font-bold mb-4">{t.settingsTitle}</h3>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span>{t.darkModeLabel} {darkMode ? t.darkModeOn : t.darkModeOff}</span>
                <button
                  onClick={() => setDarkMode(!darkMode)}
                  className="px-4 py-2 rounded-lg bg-gradient-to-r from-purple-500 to-pink-500 text-white"
                >
                  {t.toggle(darkMode)}
                </button>
              </div>
              <div className="flex justify-between items-center">
                <span>{t.soundLabel}</span>
                <button
                  onClick={() => setSoundEnabled(!soundEnabled)}
                  className="px-4 py-2 rounded-lg bg-gradient-to-r from-purple-500 to-pink-500 text-white"
                >
                  {t.toggle(soundEnabled)}
                </button>
              </div>
              <div className="flex justify-between items-center">
                <span>{t.languageLabel}</span>
                <select
                  value={language}
                  onChange={(e) => setLanguage(e.target.value)}
                  className="p-2 border rounded-lg dark:bg-gray-800 dark:border-gray-600"
                >
                  <option value="pt">{t.portuguese}</option>
                  <option value="en">{t.english}</option>
                </select>
              </div>
            </div>
          </GlowCard>
        </div>
      );
    };

    /**
     * Main application component with navigation.
     */
    const App = () => {
      // Restore persisted user or initialize defaults
      const [user, setUser] = useState(() => {
        const stored = typeof window !== 'undefined' ? localStorage.getItem('mlp_user') : null;
        if (stored) {
          try {
            return JSON.parse(stored);
          } catch (e) {
            /* ignore parse errors */
          }
        }
        return {
          username: 'Jo√£o',
          xp: 3500,
          coins: 800,
          gems: 125,
          streak: 7,
          friends: [],
          // initialize an empty NFT inventory so the store can track purchases
          nfts: [],
          // role and interests will be set through the login wizard
          role: '',
          interests: []
        };
      });

      // Whether the user has completed the login wizard. Persist across sessions.
      const [isLoggedIn, setIsLoggedIn] = useState(() => {
        const stored = typeof window !== 'undefined' ? localStorage.getItem('mlp_logged_in') : null;
        return stored === 'true';
      });
      // Active tab persisted across sessions
      const [tab, setTab] = useState(() => {
        const storedTab = typeof window !== 'undefined' ? localStorage.getItem('mlp_active_tab') : null;
        return storedTab || 'home';
      });
      const [toasts, setToasts] = useState([]);
      // Persisted preferences: language, sound and dark mode
      const [language, setLanguage] = useState(() => {
        const storedLang = typeof window !== 'undefined' ? localStorage.getItem('language') : null;
        return storedLang || 'pt';
      });
      const [soundEnabled, setSoundEnabled] = useState(() => {
        const storedSound = typeof window !== 'undefined' ? localStorage.getItem('soundEnabled') : null;
        if (storedSound === 'false') return false;
        return true;
      });
      const [darkMode, setDarkMode] = useState(() => {
        const storedDark = typeof window !== 'undefined' ? localStorage.getItem('darkMode') : null;
        if (storedDark === 'false') return false;
        return true;
      });
      // Sync HTML dark mode class
      useEffect(() => {
        document.documentElement.classList.toggle('dark', darkMode);
      }, [darkMode]);
      // Persist preferences and user whenever they change
      useEffect(() => {
        if (typeof window !== 'undefined') {
          localStorage.setItem('language', language);
        }
      }, [language]);
      useEffect(() => {
        if (typeof window !== 'undefined') {
          localStorage.setItem('soundEnabled', soundEnabled);
        }
      }, [soundEnabled]);
      useEffect(() => {
        if (typeof window !== 'undefined') {
          localStorage.setItem('darkMode', darkMode);
        }
      }, [darkMode]);
      useEffect(() => {
        if (typeof window !== 'undefined') {
          try {
            localStorage.setItem('mlp_user', JSON.stringify(user));
          } catch (e) {
            /* ignore storage errors */
          }
        }
      }, [user]);
      useEffect(() => {
        if (typeof window !== 'undefined') {
          localStorage.setItem('mlp_active_tab', tab);
        }
      }, [tab]);
      const updateUser = (updates) => setUser((prev) => ({ ...prev, ...updates }));
      const addToast = (toast) => {
        const id = Date.now().toString();
        setToasts((prev) => [...prev, { ...toast, id }]);
      };
      const removeToast = (id) => setToasts((prev) => prev.filter((t) => t.id !== id));

      // Handle completion of the login wizard. Persist login state and update
      // the user object with data from the wizard (role, username, interests).
      const handleLogin = (data) => {
        updateUser({ username: data.username, role: data.role, interests: data.interests, email: data.email || user.email });
        setIsLoggedIn(true);
        if (typeof window !== 'undefined') {
          localStorage.setItem('mlp_logged_in', 'true');
        }
        addToast({ title: 'Bem‚Äëvindo!', message: `Ol√° ${data.username}, sua jornada come√ßa agora!` });
      };
      // Build a map of tabs with labels and components based on selected language
      const tabs = {
        home: { label: translations[language].home, component: HomeTab },
        social: { label: translations[language].social, component: SocialTab },
        match: { label: translations[language].match, component: MatchTab },
        learn: { label: translations[language].learn, component: LearnTab },
        battle: { label: translations[language].battle, component: BattleTab },
        store: { label: translations[language].store, component: StoreTab },
        profile: { label: translations[language].profile, component: ProfileTab },
        settings: { label: translations[language].settings, component: SettingsTab }
      };
      const TabComponent = tabs[tab]?.component;

      // If the user has not completed the onboarding wizard, show it
      if (!isLoggedIn) {
        return <LoginWizard onFinish={handleLogin} />;
      }

      return (
        <AppContext.Provider value={{ user, updateUser, addToast, soundEnabled, setSoundEnabled, darkMode, setDarkMode, language, setLanguage }}>
          <div className="min-h-screen flex flex-col">
            <header className="sticky top-0 z-20 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-800">
              <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
                <h1 className="text-xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">Match&Learn Pro</h1>
                <div className="flex items-center gap-4 text-sm">
                  <span>XP: {formatNumber(user.xp)}</span>
                  <span>Coins: {formatNumber(user.coins)}</span>
                  <span>Gems: {formatNumber(user.gems)}</span>
                  {/* Dark mode toggle inside header but also available via settings */}
                  <button onClick={() => setDarkMode(!darkMode)} className="ml-4 p-2 border rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
                    {darkMode ? 'üåû' : 'üåö'}
                  </button>
                </div>
              </div>
            </header>
            <nav className="bg-white dark:bg-gray-900 shadow-inner">
              <div className="max-w-6xl mx-auto px-4 py-2 flex flex-wrap gap-2 justify-center">
                {Object.entries(tabs).map(([id, tabObj]) => (
                  <button
                    key={id}
                    onClick={() => setTab(id)}
                    className={`px-3 py-2 rounded-lg text-sm font-medium ${tab === id ? 'bg-purple-500 text-white' : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200'}`}
                  >
                    {tabObj.label}
                  </button>
                ))}
              </div>
            </nav>
            <main className="flex-1 p-4 max-w-6xl mx-auto">
              {TabComponent && <TabComponent />}
            </main>
            <div className="fixed bottom-4 right-4 z-50 space-y-2">
              {toasts.map((toast) => (
                <Toast key={toast.id} toast={toast} onRemove={removeToast} />
              ))}
            </div>
          </div>
        </AppContext.Provider>
      );
    };

    // Render the application
    ReactDOM.createRoot(document.getElementById('root')).render(<App />);
  </script>
</body>
</html>
