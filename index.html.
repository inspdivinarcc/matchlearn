<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Match&Learn Pro - Evolution Edition 2025</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
        
        * { font-family: 'Inter', sans-serif; }
        
        @keyframes float {
            0%, 100% { transform: translateY(0) rotate(0deg) scale(1); opacity: 0.4; }
            25% { transform: translateY(-25px) rotate(90deg) scale(1.1); opacity: 0.7; }
            50% { transform: translateY(-15px) rotate(180deg) scale(0.9); opacity: 0.9; }
            75% { transform: translateY(-20px) rotate(270deg) scale(1.05); opacity: 0.6; }
        }
        
        @keyframes pulse-glow {
            0%, 100% { box-shadow: 0 0 20px rgba(168, 85, 247, 0.3); }
            50% { box-shadow: 0 0 40px rgba(168, 85, 247, 0.6); }
        }
        
        @keyframes slide-in {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        @keyframes holographic {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        @keyframes spin-slow {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .animate-float { animation: float 20s linear infinite; }
        .animate-pulse-glow { animation: pulse-glow 2s ease-in-out infinite; }
        .animate-slide-in { animation: slide-in 0.5s ease-out; }
        .animate-spin-slow { animation: spin-slow 3s linear infinite; }
        
        .dark { background: linear-gradient(135deg, #0f0f23, #1a1a2e, #16213e); }
        
        .glass {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .dark .glass {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .holographic {
            background: linear-gradient(45deg, #ff006e, #8338ec, #3a86ff, #06ffa5, #ffbe0b);
            background-size: 400% 400%;
            animation: holographic 4s ease infinite;
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .cyber-grid {
            background-image: 
                linear-gradient(rgba(168, 85, 247, 0.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(168, 85, 247, 0.1) 1px, transparent 1px);
            background-size: 30px 30px;
        }
        
        ::-webkit-scrollbar { width: 10px; }
        ::-webkit-scrollbar-track { background: #1f2937; border-radius: 10px; }
        ::-webkit-scrollbar-thumb { 
            background: linear-gradient(45deg, #a855f7, #ec4899); 
            border-radius: 10px; 
        }
        
        .neon-border {
            position: relative;
            overflow: hidden;
        }
        
        .neon-border::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #ff00ff, #00ffff, #ff00ff);
            border-radius: inherit;
            opacity: 0;
            transition: opacity 0.3s;
            z-index: -1;
        }
        
        .neon-border:hover::before {
            opacity: 0.7;
        }
    </style>
</head>
<body>
    <div id="root"></div>

<script type="text/babel">
    const { useState, useEffect, useMemo, createContext, useContext, useRef, useCallback } = React;

    // Translation System
    const translations = {
        pt: {
            home: '🏠 Neural Hub',
            social: '💬 Social',
            match: '🤖 Quantum Match', 
            learn: '🧠 Consciousness Learn',
            battle: '⚔️ AI Arena',
            store: '🛍️ Quantum Store',
            profile: '👤 Digital Soul',
            settings: '⚙️ Configurações',
            welcome: 'Bem-vindo de volta',
            level: 'Nível',
            coins: 'Moedas',
            gems: 'Gemas',
            streak: 'Sequência',
            language: 'Idioma',
            darkMode: 'Modo Escuro',
            sound: 'Som',
            portuguese: 'Português',
            english: 'English'
        },
        en: {
            home: '🏠 Neural Hub',
            social: '💬 Social',
            match: '🤖 Quantum Match',
            learn: '🧠 Consciousness Learn', 
            battle: '⚔️ AI Arena',
            store: '🛍️ Quantum Store',
            profile: '👤 Digital Soul',
            settings: '⚙️ Settings',
            welcome: 'Welcome back',
            level: 'Level',
            coins: 'Coins',
            gems: 'Gems',
            streak: 'Streak',
            language: 'Language',
            darkMode: 'Dark Mode',
            sound: 'Sound',
            portuguese: 'Portuguese', 
            english: 'English'
        }
    };

    // Advanced Context Management
    const AppContext = createContext(null);
    const useApp = () => {
        const context = useContext(AppContext);
        if (!context) throw new Error('useApp must be used within AppProvider');
        return context;
    };

    // Utilities with improved error handling
    const formatNumber = (n) => {
        if (!Number.isFinite(n)) return "0";
        if (n < 0) return "-" + formatNumber(Math.abs(n));
        if (n >= 1000000000) return (n / 1000000000).toFixed(1) + 'B';
        if (n >= 1000000) return (n / 1000000).toFixed(1) + 'M';
        if (n >= 1000) return (n / 1000).toFixed(1) + 'K';
        return String(Math.floor(n));
    };

    const levelFromXP = (xpRaw) => {
        const xp = Math.max(0, xpRaw | 0);
        const base = 1000;
        const mult = 1.15;
        let level = 1;
        let acc = 0;
        let need = base;
        
        while (acc + need <= xp) {
            acc += need;
            level += 1;
            need = Math.floor(base * Math.pow(mult, level - 1));
        }
        
        const progress = xp - acc;
        const percentage = Math.min(100, (progress / need) * 100);
        return { level, progress, nextLevel: need, percentage };
    };

    // Enhanced Audio System
    const AudioEngine = {
        context: null,
        enabled: true,
        
        init() {
            if (this.context) return true;
            try {
                this.context = new (window.AudioContext || window.webkitAudioContext)();
                return true;
            } catch (e) {
                console.warn('Audio not available');
                return false;
            }
        },
        
        setEnabled(enabled) {
            this.enabled = enabled;
            if (typeof window !== 'undefined') {
                localStorage.setItem('mlp_sound_enabled', enabled.toString());
            }
        },
        
        play(type = 'success') {
            if (!this.enabled || !this.context) return;
            
            const oscillator = this.context.createOscillator();
            const gain = this.context.createGain();
            
            oscillator.connect(gain);
            gain.connect(this.context.destination);
            
            const frequencies = {
                success: [440, 880, 1320],
                notification: [800, 600],
                battle: [220, 330, 440],
                error: [300, 200]
            };
            
            const seq = frequencies[type] || frequencies.success;
            const now = this.context.currentTime;
            
            gain.gain.setValueAtTime(0, now);
            gain.gain.linearRampToValueAtTime(0.1, now + 0.02);
            
            seq.forEach((freq, i) => {
                oscillator.frequency.setValueAtTime(freq, now + i * 0.1);
            });
            
            gain.gain.exponentialRampToValueAtTime(0.001, now + seq.length * 0.1 + 0.2);
            
            oscillator.start(now);
            oscillator.stop(now + seq.length * 0.1 + 0.3);
        }
    };

    // Persistent Storage System
    const StorageEngine = {
        set(key, value) {
            try {
                localStorage.setItem(`mlp_${key}`, JSON.stringify(value));
                return true;
            } catch (e) {
                console.warn('Storage failed:', e);
                return false;
            }
        },
        
        get(key, defaultValue = null) {
            try {
                const item = localStorage.getItem(`mlp_${key}`);
                return item ? JSON.parse(item) : defaultValue;
            } catch (e) {
                console.warn('Storage retrieval failed:', e);
                return defaultValue;
            }
        },
        
        remove(key) {
            try {
                localStorage.removeItem(`mlp_${key}`);
                return true;
            } catch (e) {
                console.warn('Storage removal failed:', e);
                return false;
            }
        }
    };

    // Advanced Particle System
    const ParticleSystem = ({ active = false, type = 'success' }) => {
        const canvasRef = useRef(null);
        const animationRef = useRef(null);
        const particles = useRef([]);
        
        useEffect(() => {
            if (!active || !canvasRef.current) return;
            
            const canvas = canvasRef.current;
            const ctx = canvas.getContext('2d');
            
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            
            const colors = {
                success: ['#10b981', '#34d399', '#6ee7b7'],
                battle: ['#ef4444', '#f87171', '#fca5a5'],
                purchase: ['#8b5cf6', '#a78bfa', '#c4b5fd']
            };
            
            const particleColors = colors[type] || colors.success;
            
            particles.current = Array.from({ length: 100 }, () => ({
                x: canvas.width / 2,
                y: canvas.height / 2,
                vx: (Math.random() - 0.5) * 8,
                vy: (Math.random() - 0.5) * 8,
                size: Math.random() * 4 + 2,
                color: particleColors[Math.floor(Math.random() * particleColors.length)],
                life: 1,
                decay: Math.random() * 0.02 + 0.01
            }));
            
            const animate = () => {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                particles.current.forEach((particle, index) => {
                    particle.x += particle.vx;
                    particle.y += particle.vy;
                    particle.vy += 0.1;
                    particle.life -= particle.decay;
                    
                    if (particle.life <= 0) {
                        particles.current.splice(index, 1);
                        return;
                    }
                    
                    ctx.globalAlpha = particle.life;
                    ctx.beginPath();
                    ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                    ctx.fillStyle = particle.color;
                    ctx.fill();
                });
                
                if (particles.current.length > 0) {
                    animationRef.current = requestAnimationFrame(animate);
                }
            };
            
            animate();
            
            return () => {
                if (animationRef.current) {
                    cancelAnimationFrame(animationRef.current);
                }
            };
        }, [active, type]);
        
        if (!active) return null;
        
        return (
            <canvas
                ref={canvasRef}
                className="fixed inset-0 pointer-events-none z-40"
                style={{ opacity: 0.8 }}
            />
        );
    };

    // Enhanced UI Components
    const GlowCard = ({ children, glow = false, interactive = false, className = '', cyber = false, ...rest }) => (
        <div
            className={`
                glass rounded-3xl shadow-2xl text-gray-900 dark:text-gray-100
                ${interactive ? 'hover:shadow-3xl hover:scale-[1.02] cursor-pointer transform-gpu' : 'hover:shadow-xl'}
                ${glow ? 'animate-pulse-glow' : ''}
                ${cyber ? 'neon-border' : ''}
                transition-all duration-500 ease-out backdrop-blur-xl
                ${className}
            `}
            {...rest}
        >
            {children}
        </div>
    );

    const ProgressRing = ({ progress, size = 100, strokeWidth = 8, color = "purple", showText = true }) => {
        const radius = (size - strokeWidth) / 2;
        const circumference = radius * 2 * Math.PI;
        const offset = circumference - (progress / 100) * circumference;
        
        const colors = {
            purple: '#a855f7',
            blue: '#3b82f6',
            green: '#10b981',
            orange: '#f59e0b',
            red: '#ef4444',
            pink: '#ec4899',
            cyan: '#06b6d4'
        };
        
        return (
            <div className="relative">
                <svg width={size} height={size} className="transform -rotate-90">
                    <circle
                        cx={size / 2}
                        cy={size / 2}
                        r={radius}
                        stroke="rgba(255,255,255,0.1)"
                        strokeWidth={strokeWidth}
                        fill="none"
                    />
                    <circle
                        cx={size / 2}
                        cy={size / 2}
                        r={radius}
                        stroke={colors[color]}
                        strokeWidth={strokeWidth}
                        fill="none"
                        strokeDasharray={circumference}
                        strokeDashoffset={offset}
                        strokeLinecap="round"
                        className="transition-all duration-1000 ease-out"
                        style={{
                            filter: `drop-shadow(0 0 10px ${colors[color]}40)`
                        }}
                    />
                </svg>
                {showText && (
                    <div className="absolute inset-0 flex items-center justify-center">
                        <span className="text-xl font-bold">{Math.round(progress)}%</span>
                    </div>
                )}
            </div>
        );
    };

    // Toast Notification System
    const Toast = ({ toast, onRemove }) => {
        useEffect(() => {
            const timer = setTimeout(() => onRemove(toast.id), 4000);
            return () => clearTimeout(timer);
        }, [toast.id, onRemove]);

        const typeStyles = {
            success: 'border-green-500/50 bg-green-500/10',
            error: 'border-red-500/50 bg-red-500/10',
            info: 'border-blue-500/50 bg-blue-500/10'
        };

        return (
            <div className={`glass border rounded-3xl p-4 min-w-80 animate-slide-in ${typeStyles[toast.type] || typeStyles.info}`}>
                <h4 className="font-bold text-lg flex items-center mb-2">
                    {toast.type === 'success' ? '✅' : toast.type === 'error' ? '❌' : '🔔'} {toast.title}
                </h4>
                <p className="text-sm opacity-90 leading-relaxed">{toast.message}</p>
            </div>
        );
    };

    // Enhanced Home Tab
    const HomeTab = () => {
        const { user, updateUser, addToast, t } = useApp();
        const [showParticles, setShowParticles] = useState(false);
        const [particleType, setParticleType] = useState('success');
        
        const levelInfo = levelFromXP(user.xp);
        
        const dailyQuests = [
            {
                id: 'q1',
                title: 'Neural Learning Master',
                description: 'Complete 3 AI-powered lessons today',
                progress: 2,
                target: 3,
                rewards: { xp: 250, coins: 100, gems: 25 },
                icon: '🧠',
                rarity: 'epic'
            },
            {
                id: 'q2', 
                title: 'Social Connector',
                description: 'Make 5 meaningful connections',
                progress: 3,
                target: 5,
                rewards: { xp: 200, coins: 75, nft: true },
                icon: '🤝',
                rarity: 'rare'
            },
            {
                id: 'q3',
                title: 'Quantum Battle Champion',
                description: 'Win 2 advanced battles',
                progress: 1,
                target: 2,
                rewards: { xp: 500, coins: 200, gems: 100 },
                icon: '⚔️',
                rarity: 'legendary'
            }
        ];

        const claimReward = (quest) => {
            if (quest.progress < quest.target) return;

            const { xp = 0, coins = 0, gems = 0, nft = false } = quest.rewards;
            updateUser({
                xp: user.xp + xp,
                coins: user.coins + coins,
                gems: user.gems + gems
            });

            if (nft) {
                addToast({
                    title: 'NFT Reward Unlocked!',
                    message: `You received a ${quest.rarity} NFT certificate!`,
                    type: 'success'
                });
            }

            addToast({
                title: `${quest.rarity.toUpperCase()} Quest Completed!`,
                message: `+${xp} XP, +${coins} coins${gems > 0 ? `, +${gems} gems` : ''}!`,
                type: 'success'
            });

            AudioEngine.play('success');
            setParticleType('success');
            setShowParticles(true);
            setTimeout(() => setShowParticles(false), 3000);
        };

        return (
            <div className="space-y-8 relative">
                <ParticleSystem active={showParticles} type={particleType} />
                
                {/* Neural Dashboard */}
                <GlowCard className="p-8 cyber" glow>
                    <div className="flex items-center justify-between mb-8">
                        <div className="space-y-4">
                            <h2 className="text-4xl font-bold holographic">
                                {t.welcome}, {user.username}!
                            </h2>
                            <p className="text-xl opacity-80">
                                Neural interface synchronized • Consciousness Level: {levelInfo.level}
                            </p>
                            <div className="flex items-center space-x-8">
                                <div className="text-center">
                                    <div className="text-4xl font-bold text-orange-400">{user.streak}</div>
                                    <div className="text-sm opacity-60">{t.streak} 🔥</div>
                                </div>
                                <div className="text-center">
                                    <div className="text-4xl font-bold text-purple-400">{levelInfo.level}</div>
                                    <div className="text-sm opacity-60">{t.level} 🚀</div>
                                </div>
                                <div className="text-center">
                                    <div className="text-4xl font-bold text-cyan-400">98%</div>
                                    <div className="text-sm opacity-60">Neural Sync ⚡</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Advanced Progress Bar */}
                    <div className="mb-8">
                        <div className="flex justify-between mb-3">
                            <span className="font-semibold text-lg">Consciousness Level {levelInfo.level}</span>
                            <span className="text-sm opacity-70">
                                {levelInfo.progress}/{levelInfo.nextLevel} Neural Points
                            </span>
                        </div>
                        <div className="relative h-6 bg-black/30 rounded-full overflow-hidden">
                            <div 
                                className="h-full bg-gradient-to-r from-purple-500 via-pink-500 via-cyan-500 to-green-500 rounded-full transition-all duration-2000 ease-out relative"
                                style={{ width: `${levelInfo.percentage}%` }}
                            >
                                <div className="absolute inset-0 bg-white/20 animate-pulse"></div>
                            </div>
                        </div>
                    </div>

                    {/* Neural Metrics */}
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
                        <div className="text-center p-6 bg-gradient-to-br from-blue-500/20 to-indigo-500/20 rounded-3xl">
                            <ProgressRing progress={94} size={100} color="blue" />
                            <div className="mt-4">
                                <div className="font-bold">Neural Efficiency</div>
                                <div className="text-xs opacity-60">Learning Rate</div>
                            </div>
                        </div>
                        <div className="text-center p-6 bg-gradient-to-br from-green-500/20 to-emerald-500/20 rounded-3xl">
                            <ProgressRing progress={98} size={100} color="green" />
                            <div className="mt-4">
                                <div className="font-bold">AI Symbiosis</div>
                                <div className="text-xs opacity-60">Human-AI Fusion</div>
                            </div>
                        </div>
                        <div className="text-center p-6 bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-3xl">
                            <ProgressRing progress={87} size={100} color="purple" />
                            <div className="mt-4">
                                <div className="font-bold">Consciousness</div>
                                <div className="text-xs opacity-60">Awareness Level</div>
                            </div>
                        </div>
                        <div className="text-center p-6 bg-gradient-to-br from-orange-500/20 to-red-500/20 rounded-3xl">
                            <ProgressRing progress={92} size={100} color="orange" />
                            <div className="mt-4">
                                <div className="font-bold">Social Network</div>
                                <div className="text-xs opacity-60">Connections</div>
                            </div>
                        </div>
                    </div>
                </GlowCard>

                {/* Enhanced Daily Quests */}
                <GlowCard className="p-8">
                    <h3 className="text-2xl font-bold mb-8 flex items-center">
                        📋 Daily Neural Quests
                        <div className="ml-auto flex space-x-3">
                            <span className="px-3 py-1 bg-blue-500/20 text-blue-300 rounded-full text-sm font-bold">RARE</span>
                            <span className="px-3 py-1 bg-purple-500/20 text-purple-300 rounded-full text-sm font-bold">EPIC</span>
                            <span className="px-3 py-1 bg-orange-500/20 text-orange-300 rounded-full text-sm font-bold">LEGENDARY</span>
                        </div>
                    </h3>
                    <div className="space-y-6">
                        {dailyQuests.map((quest) => (
                            <div key={quest.id} className={`p-6 rounded-3xl border-2 transition-all duration-300 ${
                                quest.rarity === 'legendary' ? 'border-orange-500/50 bg-gradient-to-r from-orange-500/10 to-yellow-500/10' :
                                quest.rarity === 'epic' ? 'border-purple-500/50 bg-gradient-to-r from-purple-500/10 to-pink-500/10' :
                                'border-blue-500/50 bg-gradient-to-r from-blue-500/10 to-cyan-500/10'
                            }`}>
                                <div className="flex items-center gap-6">
                                    <div className="text-5xl animate-pulse">{quest.icon}</div>
                                    <div className="flex-1 space-y-3">
                                        <div className="flex items-center gap-3">
                                            <h4 className="font-bold text-xl">{quest.title}</h4>
                                            <span className={`px-3 py-1 rounded-full text-xs font-bold ${
                                                quest.rarity === 'legendary' ? 'bg-orange-500/20 text-orange-300' :
                                                quest.rarity === 'epic' ? 'bg-purple-500/20 text-purple-300' :
                                                'bg-blue-500/20 text-blue-300'
                                            }`}>
                                                {quest.rarity.toUpperCase()}
                                            </span>
                                        </div>
                                        <p className="text-sm opacity-80">{quest.description}</p>
                                        <div className="space-y-2">
                                            <div className="flex justify-between text-sm">
                                                <span>Progress</span>
                                                <span className="font-semibold">{quest.progress}/{quest.target}</span>
                                            </div>
                                            <div className="relative h-3 bg-black/30 rounded-full overflow-hidden">
                                                <div 
                                                    className={`h-full rounded-full transition-all duration-500 ${
                                                        quest.rarity === 'legendary' ? 'bg-gradient-to-r from-orange-500 to-yellow-500' :
                                                        quest.rarity === 'epic' ? 'bg-gradient-to-r from-purple-500 to-pink-500' :
                                                        'bg-gradient-to-r from-blue-500 to-cyan-500'
                                                    }`}
                                                    style={{ width: `${(quest.progress / quest.target) * 100}%` }}
                                                />
                                            </div>
                                        </div>
                                    </div>
                                    <button
                                        onClick={() => claimReward(quest)}
                                        disabled={quest.progress < quest.target}
                                        className={`px-6 py-3 rounded-xl font-bold transition-all duration-300 ${
                                            quest.progress >= quest.target
                                                ? `${quest.rarity === 'legendary' ? 'bg-gradient-to-r from-orange-500 to-yellow-500' :
                                                    quest.rarity === 'epic' ? 'bg-gradient-to-r from-purple-500 to-pink-500' :
                                                    'bg-gradient-to-r from-blue-500 to-cyan-500'
                                                  } text-white shadow-lg hover:shadow-xl transform hover:scale-105`
                                                : 'bg-gray-600/50 text-gray-400 cursor-not-allowed'
                                        }`}
                                    >
                                        {quest.progress >= quest.target ? '🎁 Claim' : '⏳ Progress'}
                                    </button>
                                </div>
                            </div>
                        ))}
                    </div>
                </GlowCard>
            </div>
        );
    };

    // Other tabs would follow similar patterns...
    // For brevity, I'll implement the main app structure and a few key tabs

    // Settings Tab with Persistence
    const SettingsTab = () => {
        const { darkMode, setDarkMode, language, setLanguage, soundEnabled, setSoundEnabled, t } = useApp();

        return (
            <div className="space-y-6">
                <GlowCard className="p-6">
                    <h3 className="text-2xl font-bold mb-6 holographic">System Configuration</h3>
                    <div className="space-y-6">
                        <div className="flex items-center justify-between">
                            <div>
                                <div className="font-semibold">{t.darkMode}</div>
                                <div className="text-sm opacity-60">Toggle visual theme</div>
                            </div>
                            <button
                                onClick={() => setDarkMode(!darkMode)}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                                    darkMode ? 'bg-purple-600' : 'bg-gray-300'
                                }`}
                            >
                                <span
                                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                                        darkMode ? 'translate-x-6' : 'translate-x-1'
                                    }`}
                                />
                            </button>
                        </div>

                        <div className="flex items-center justify-between">
                            <div>
                                <div className="font-semibold">{t.sound}</div>
                                <div className="text-sm opacity-60">Audio feedback</div>
                            </div>
                            <button
                                onClick={() => setSoundEnabled(!soundEnabled)}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                                    soundEnabled ? 'bg-purple-600' : 'bg-gray-300'
                                }`}
                            >
                                <span
                                    className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                                        soundEnabled ? 'translate-x-6' : 'translate-x-1'
                                    }`}
                                />
                            </button>
                        </div>

                        <div className="flex items-center justify-between">
                            <div>
                                <div className="font-semibold">{t.language}</div>
                                <div className="text-sm opacity-60">Interface language</div>
                            </div>
                            <select
                                value={language}
                                onChange={(e) => setLanguage(e.target.value)}
                                className="glass border rounded-xl px-4 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"
                            >
                                <option value="pt">{t.portuguese}</option>
                                <option value="en">{t.english}</option>
                            </select>
                        </div>
                    </div>
                </GlowCard>
            </div>
        );
    };

    // Main App Component with Enhanced Features
    const App = () => {
        // Persistent state management
        const [isLoggedIn, setIsLoggedIn] = useState(() => 
            StorageEngine.get('logged_in', false)
        );
        
        const [activeTab, setActiveTab] = useState(() => 
            StorageEngine.get('active_tab', 'home')
        );
        
        const [user, setUser] = useState(() => 
            StorageEngine.get('user', {
                id: '1',
                username: 'Neural Pioneer',
                xp: 5850,
                coins: 3500,
                gems: 250,
                streak: 15,
                studyTime: 87,
                socialScore: 850,
                isPremium: true,
                interests: ['Quantum AI', 'Consciousness', 'Neural Interfaces'],
                friends: [],
                coursesCompleted: 12,
                nfts: [],
                joinedDate: Date.now()
            })
        );
        
        const [toasts, setToasts] = useState([]);
        
        const [language, setLanguage] = useState(() => 
            StorageEngine.get('language', 'pt')
        );
        
        const [darkMode, setDarkMode] = useState(() => 
            StorageEngine.get('dark_mode', true)
        );
        
        const [soundEnabled, setSoundEnabled] = useState(() => 
            StorageEngine.get('sound_enabled', true)
        );

        // Initialize audio and sync DOM
        useEffect(() => {
            AudioEngine.init();
            AudioEngine.setEnabled(soundEnabled);
            document.documentElement.classList.toggle('dark', darkMode);
        }, []);

        // Persist state changes
        useEffect(() => {
            StorageEngine.set('user', user);
        }, [user]);

        useEffect(() => {
            StorageEngine.set('active_tab', activeTab);
        }, [activeTab]);

        useEffect(() => {
            StorageEngine.set('language', language);
        }, [language]);

        useEffect(() => {
            StorageEngine.set('dark_mode', darkMode);
            document.documentElement.classList.toggle('dark', darkMode);
        }, [darkMode]);

        useEffect(() => {
            StorageEngine.set('sound_enabled', soundEnabled);
            AudioEngine.setEnabled(soundEnabled);
        }, [soundEnabled]);

        const updateUser = useCallback((updates) => {
            setUser(prev => ({ ...prev, ...updates }));
        }, []);

        const addToast = useCallback((toast) => {
            const id = Date.now().toString();
            setToasts(prev => [...prev, { ...toast, id, type: toast.type || 'info' }]);
        }, []);

        const removeToast = useCallback((id) => {
            setToasts(prev => prev.filter(t => t.id !== id));
        }, []);

        const handleLogin = (userData) => {
            updateUser({ ...userData, joinedDate: Date.now() });
            setIsLoggedIn(true);
            StorageEngine.set('logged_in', true);
            AudioEngine.play('success');
            addToast({
                title: 'System Activated!',
                message: `Neural interface synchronized. Welcome, ${userData.username}!`,
                type: 'success'
            });
        };

        const t = translations[language];

        const contextValue = useMemo(() => ({
            user,
            updateUser,
            addToast,
            language,
            setLanguage,
            darkMode,
            setDarkMode,
            soundEnabled,
            setSoundEnabled,
            t
        }), [user, updateUser, addToast, language, darkMode, soundEnabled, t]);

        // Enhanced Login Wizard
        const LoginWizard = ({ onFinish }) => {
            const [step, setStep] = useState(1);
            const [formData, setFormData] = useState({
                username: '',
                email: '',
                interests: []
            });

            const INTERESTS = ['AI', 'Quantum Computing', 'Blockchain', 'Neural Networks', 'Consciousness', 'Metaverse'];

            const handleFinish = () => {
                onFinish(formData);
            };

            return (
                <div className="min-h-screen cyber-grid flex items-center justify-center p-6">
                    <ParticleSystem active={true} type="success" />
                    
                    <GlowCard className="p-8 w-full max-w-lg text-center" glow cyber>
                        <div className="space-y-6">
                            <div className="text-8xl animate-spin-slow">🚀</div>
                            <div>
                                <h1 className="text-4xl font-bold holographic mb-2">
                                    Match&Learn Pro
                                </h1>
                                <p className="text-xl font-semibold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
                                    Evolution Edition 2025
                                </p>
                                <p className="text-sm opacity-70 mt-2">
                                    Advanced Neural Learning Platform
                                </p>
                            </div>
                            
                            {step === 1 && (
                                <div className="space-y-4">
                                    <input
                                        placeholder="Your Neural ID"
                                        value={formData.username}
                                        onChange={(e) => setFormData({...formData, username: e.target.value})}
                                        className="w-full px-4 py-3 glass border rounded-2xl focus:outline-none focus:ring-2 focus:ring-purple-500 text-white placeholder-gray-400"
                                    />
                                    <input
                                        placeholder="Neural Network Email"
                                        type="email"
                                        value={formData.email}
                                        onChange={(e) => setFormData({...formData, email: e.target.value})}
                                        className="w-full px-4 py-3 glass border rounded-2xl focus:outline-none focus:ring-2 focus:ring-purple-500 text-white placeholder-gray-400"
                                    />
                                    <button
                                        onClick={() => setStep(2)}
                                        disabled={!formData.username || !formData.email}
                                        className="w-full py-4 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-2xl font-bold text-lg disabled:opacity-50 hover:shadow-2xl transition-all"
                                    >
                                        Initialize Neural Interface
                                    </button>
                                </div>
                            )}

                            {step === 2 && (
                                <div className="space-y-6">
                                    <h3 className="text-xl font-semibold">Select Neural Pathways</h3>
                                    <div className="grid grid-cols-2 gap-3">
                                        {INTERESTS.map((interest) => (
                                            <button
                                                key={interest}
                                                onClick={() => {
                                                    const newInterests = formData.interests.includes(interest)
                                                        ? formData.interests.filter(i => i !== interest)
                                                        : [...formData.interests, interest];
                                                    setFormData({...formData, interests: newInterests});
                                                }}
                                                className={`p-3 rounded-2xl border-2 transition-all ${
                                                    formData.interests.includes(interest)
                                                        ? 'border-purple-500 bg-purple-500/20'
                                                        : 'border-gray-600 hover:border-purple-400'
                                                }`}
                                            >
                                                {interest}
                                            </button>
                                        ))}
                                    </div>
                                    <button
                                        onClick={handleFinish}
                                        className="w-full py-4 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 text-white rounded-2xl font-bold text-lg hover:shadow-2xl transition-all"
                                    >
                                        🧠 Activate Quantum Consciousness
                                    </button>
                                </div>
                            )}
                        </div>
                    </GlowCard>
                </div>
            );
        };

        if (!isLoggedIn) {
            return <LoginWizard onFinish={handleLogin} />;
        }

        return (
            <AppContext.Provider value={contextValue}>
                <div className={`min-h-screen ${darkMode ? 'dark' : ''}`}>
                    <div className="min-h-screen cyber-grid">
                        {/* Enhanced Header */}
                        <header className="sticky top-0 z-50 glass border-b backdrop-blur-3xl">
                            <div className="container mx-auto px-6 py-4">
                                <div className="flex items-center justify-between">
                                    <div className="flex items-center space-x-4">
                                        <h1 className="text-3xl font-bold holographic">
                                            Match&Learn Pro
                                        </h1>
                                        <span className="px-3 py-1 bg-gradient-to-r from-purple-500/20 to-cyan-500/20 text-purple-300 border border-purple-500/50 rounded-full text-sm font-bold">
                                            EVOLUTION 2025
                                        </span>
                                    </div>
                                    
                                    <div className="flex items-center space-x-4">
                                        <div className="px-4 py-2 glass rounded-2xl border">
                                            <span className="font-bold">🏆 Level {levelFromXP(user.xp).level}</span>
                                        </div>
                                        <div className="px-4 py-2 glass rounded-2xl border">
                                            <span className="font-bold">💰 {formatNumber(user.coins)}</span>
                                        </div>
                                        <div className="px-4 py-2 glass rounded-2xl border">
                                            <span className="font-bold">💎 {formatNumber(user.gems)}</span>
                                        </div>
                                        <button 
                                            onClick={() => setDarkMode(!darkMode)}
                                            className="p-3 glass rounded-2xl border hover:bg-white/10 transition-all"
                                        >
                                            {darkMode ? '☀️' : '🌙'}
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </header>

                        {/* Enhanced Navigation */}
                        <nav className="container mx-auto px-6 py-6">
                            <div className="flex gap-4 flex-wrap justify-center">
                                {[
                                    { id: 'home', label: t.home, glow: true },
                                    { id: 'social', label: t.social, glow: false },
                                    { id: 'match', label: t.match, glow: true },
                                    { id: 'learn', label: t.learn, glow: false },
                                    { id: 'battle', label: t.battle, glow: false },
                                    { id: 'store', label: t.store, glow: false },
                                    { id: 'profile', label: t.profile, glow: false },
                                    { id: 'settings', label: t.settings, glow: false }
                                ].map((tab) => (
                                    <button
                                        key={tab.id}
                                        onClick={() => setActiveTab(tab.id)}
                                        className={`px-6 py-4 rounded-3xl font-bold transition-all duration-500 ${
                                            activeTab === tab.id
                                                ? 'bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 text-white shadow-3xl transform scale-105'
                                                : 'glass border hover:bg-white/10 hover:scale-102'
                                        } ${tab.glow && activeTab === tab.id ? 'animate-pulse-glow' : ''}`}
                                    >
                                        {tab.label}
                                    </button>
                                ))}
                            </div>
                        </nav>

                        {/* Content */}
                        <main className="container mx-auto px-6 pb-12">
                            {activeTab === 'home' && <HomeTab />}
                            {activeTab === 'settings' && <SettingsTab />}
                            {/* Other tabs would be implemented here */}
                        </main>

                        {/* Enhanced Toast System */}
                        <div className="fixed bottom-6 right-6 z-50 space-y-4">
                            {toasts.map((toast) => (
                                <Toast
                                    key={toast.id}
                                    toast={toast}
                                    onRemove={removeToast}
                                />
                            ))}
                        </div>
                    </div>
                </div>
            </AppContext.Provider>
        );
    };

    ReactDOM.render(<App />, document.getElementById('root'));
</script>
</body>
</html>
